


//optimal solution 

class Solution
{
    public:
    //Function to find largest rectangular area possible in a given histogram.
    long long getMaxArea(long long arr[], int n){
       
      vector<long long>nsl(n,-1);
      vector<long long>nsr(n,n);
      
      
 //next smaller left element for each index
 
 stack<long long>st;

for(int i=0;i<n;i++){
    
  while(!st.empty() && arr[st.top()]>=arr[i])st.pop();
  
 // if(st.empty())nsl[i]=-1;
  
   if(!st.empty())
      nsl[i]=st.top();
  
  
  st.push(i);
 
}

  
  
   while(!st.empty())st.pop();   
 //next smaller right element for each index
 


for(int i=n-1;i>=0;i--){
    
  while(!st.empty() && arr[st.top()]>=arr[i]) st.pop();
  
  //if(st.empty())nsr[i]=n;
  
 if(!st.empty())
      nsr[i]=st.top();
  
  
  st.push(i);
 
}
      
  
//logic of histogram

long long res=0;
//reverse(nsr.begin(),nsr.end());

for(int i=0;i<n;i++){
  
  res=max(res,(nsr[i]-nsl[i]-1)*arr[i]);
  
}
 
  
return res;
       
        
    }
};

